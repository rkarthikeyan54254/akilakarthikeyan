---
import { cartItems } from '../stores/cartStore';
---

<div 
  id="cart-drawer"
  class="fixed inset-y-0 right-0 w-full max-w-md bg-white shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out z-50"
>
  <div class="h-full flex flex-col">
    <div class="px-4 py-6 bg-gray-50 border-b">
      <div class="flex items-center justify-between">
        <h2 class="text-lg font-semibold text-gray-900">கூடை</h2>
        <button id="close-cart" class="text-gray-400 hover:text-gray-500">
          <span class="sr-only">Close cart</span>
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <div class="flex-1 overflow-y-auto px-4 py-6">
      <div id="cart-items" class="space-y-4"></div>
    </div>

    <div class="border-t px-4 py-6">
      <div class="flex justify-between text-base font-medium text-gray-900 mb-4">
        <p>மொத்தம்</p>
        <p id="cart-total">₹0</p>
      </div>

      <button
        id="checkout-button"
        class="w-full bg-gray-900 text-white py-3 px-6 rounded-lg hover:bg-gray-800 transition-colors"
      >
        வாங்க
      </button>
    </div>
  </div>
</div>

<div id="cart-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden"></div>

<script>
  import { cartItems, updateQuantity, removeFromCart, getCartTotal, clearCart } from '../stores/cartStore';

  declare global {
    interface Window {
      Razorpay: any;
    }
  }

  const drawer = document.getElementById('cart-drawer');
  const overlay = document.getElementById('cart-overlay');
  const cartButton = document.getElementById('cart-button');
  const closeButton = document.getElementById('close-cart');
  const cartItemsContainer = document.getElementById('cart-items');
  const cartTotalElement = document.getElementById('cart-total');
  const checkoutButton = document.getElementById('checkout-button');

  function toggleCart() {
    drawer?.classList.toggle('translate-x-full');
    overlay?.classList.toggle('hidden');
  }

  function updateCartUI(items: any[]) {
    if (!cartItemsContainer) return;

    cartItemsContainer.innerHTML = items.length ? items.map(item => `
      <div class="flex items-center gap-4">
        <img src="${item.coverImage}" alt="${item.title}" class="w-20 h-20 object-cover rounded">
        <div class="flex-1">
          <h3 class="text-sm font-medium text-gray-900">${item.title}</h3>
          <p class="text-sm text-gray-500">₹${item.price}</p>
          <div class="flex items-center gap-2 mt-2">
            <button 
              class="quantity-btn" 
              data-action="decrease" 
              data-id="${item.id}"
            >-</button>
            <span>${item.quantity}</span>
            <button 
              class="quantity-btn" 
              data-action="increase" 
              data-id="${item.id}"
            >+</button>
            <button 
              class="remove-item ml-4 text-red-600" 
              data-id="${item.id}"
            >Remove</button>
          </div>
        </div>
      </div>
    `).join('') : '<p class="text-gray-500">கூடை காலியாக உள்ளது</p>';

    if (cartTotalElement) {
      cartTotalElement.textContent = `₹${getCartTotal()}`;
    }
  }

  async function handleCheckout() {
    try {
      const response = await fetch('/api/create-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: getCartTotal()
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create order');
      }

      const order = await response.json();

      const options = {
        key: import.meta.env.PUBLIC_RAZORPAY_KEY_ID,
        amount: order.amount,
        currency: "INR",
        name: "அகிலா கார்த்திகேயன்",
        description: "Book Purchase",
        order_id: order.id,
        handler: async function (response: any) {
          const { razorpay_payment_id, razorpay_order_id, razorpay_signature } = response;

          // Verify payment
          const verifyResponse = await fetch('/api/verify-payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              orderId: razorpay_order_id,
              paymentId: razorpay_payment_id,
              signature: razorpay_signature
            }),
          });

          if (!verifyResponse.ok) {
            throw new Error('Payment verification failed');
          }

          const { valid } = await verifyResponse.json();

          if (valid) {
            // Clear cart and show success message
            clearCart();
            toggleCart();
            alert('பரிவர்த்தனை வெற்றிகரமாக முடிந்தது!');
          } else {
            alert('பரிவர்த்தனை சரிபார்ப்பு தோல்வியடைந்தது');
          }
        },
        prefill: {
          name: "",
          email: "",
          contact: ""
        },
        theme: {
          color: "#111827"
        }
      };

      const razorpay = new window.Razorpay(options);
      razorpay.open();
    } catch (error) {
      console.error('Checkout error:', error);
      alert('பரிவர்த்தனை தோல்வியடைந்தது. மீண்டும் முயற்சிக்கவும்.');
    }
  }

  // Event Listeners
  cartButton?.addEventListener('click', toggleCart);
  closeButton?.addEventListener('click', toggleCart);
  overlay?.addEventListener('click', toggleCart);
  checkoutButton?.addEventListener('click', handleCheckout);

  cartItemsContainer?.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const id = target.dataset.id;
    
    if (!id) return;

    if (target.classList.contains('quantity-btn')) {
      const action = target.dataset.action;
      const currentItems = cartItems.get();
      const item = currentItems.find(i => i.id === id);
      
      if (item) {
        updateQuantity(id, action === 'increase' ? item.quantity + 1 : item.quantity - 1);
      }
    }

    if (target.classList.contains('remove-item')) {
      removeFromCart(id);
    }
  });

  // Subscribe to cart changes
  cartItems.subscribe(updateCartUI);
</script>

<style>
  .quantity-btn {
    @apply w-6 h-6 flex items-center justify-center rounded-full border border-gray-300 hover:bg-gray-100;
  }
</style>