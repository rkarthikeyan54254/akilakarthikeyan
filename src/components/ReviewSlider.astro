---
interface Props {
  reviews: Array<{
    name: string;
    comment: string;
    date: string;
    storyTitle: string;
    storySlug: string;
  }>;
}

const { reviews } = Astro.props;
---

<div class="bg-gray-50 py-12 mt-12">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <h2 class="text-3xl font-bold text-center mb-12">வாசகர்கள் கருத்துகள்</h2>
    
    {reviews.length > 0 ? (
      <div class="relative">
        <div id="review-slider" class="overflow-hidden">
          <div id="review-track" class="flex transition-transform duration-500">
            {reviews.map(review => (
              <div class="flex-none w-full md:w-1/2 lg:w-1/3 px-4">
                <div class="bg-white rounded-lg shadow-md p-6 h-full">
                  <div class="flex items-center justify-between mb-4">
                    <h3 class="font-medium text-gray-900">{review.name}</h3>
                    <a 
                      href={`/stories/${review.storySlug}`}
                      class="text-sm text-gray-600 hover:text-gray-900"
                    >
                      {review.storyTitle}
                    </a>
                  </div>
                  <p class="text-gray-700 line-clamp-4 mb-4">{review.comment}</p>
                  <time class="text-sm text-gray-500">{new Date(review.date).toLocaleDateString('ta-IN')}</time>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {reviews.length > 1 && (
          <>
            <button 
              id="prev-review"
              class="absolute left-0 top-1/2 -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-50"
              aria-label="Previous review"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            
            <button 
              id="next-review"
              class="absolute right-0 top-1/2 -translate-y-1/2 bg-white rounded-full p-2 shadow-md hover:bg-gray-50"
              aria-label="Next review"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </>
        )}
      </div>
    ) : (
      <p class="text-center text-gray-600">கருத்துகள் எதுவும் இல்லை</p>
    )}
  </div>
</div>

<script>
function initSlider() {
  let currentSlide = 0;
  const track = document.getElementById('review-track');
  const prevButton = document.getElementById('prev-review');
  const nextButton = document.getElementById('next-review');
  const slider = document.getElementById('review-slider');

  if (!track || !track.children.length) return;

  function updateSlidePosition() {
    if (!track || !track.children[0]) return;
    
    const slides = track.children;
    const slideWidth = slides[0].getBoundingClientRect().width;
    track.style.transform = `translateX(-${currentSlide * slideWidth}px)`;
    
    if (prevButton) {
      prevButton.disabled = currentSlide === 0;
      prevButton.style.opacity = currentSlide === 0 ? '0.5' : '1';
    }
    
    if (nextButton) {
      nextButton.disabled = currentSlide === slides.length - 1;
      nextButton.style.opacity = currentSlide === slides.length - 1 ? '0.5' : '1';
    }
  }

  let slideInterval: number;

  function startAutoSlide() {
    if (!track || track.children.length <= 1) return;
    
    slideInterval = window.setInterval(() => {
      if (currentSlide < track.children.length - 1) {
        currentSlide++;
      } else {
        currentSlide = 0;
      }
      updateSlidePosition();
    }, 5000);
  }

  function stopAutoSlide() {
    if (slideInterval) {
      clearInterval(slideInterval);
    }
  }

  prevButton?.addEventListener('click', () => {
    if (currentSlide > 0) {
      currentSlide--;
      updateSlidePosition();
    }
  });

  nextButton?.addEventListener('click', () => {
    if (!track) return;
    if (currentSlide < track.children.length - 1) {
      currentSlide++;
      updateSlidePosition();
    }
  });

  slider?.addEventListener('mouseenter', stopAutoSlide);
  slider?.addEventListener('mouseleave', startAutoSlide);
  window.addEventListener('resize', updateSlidePosition);

  // Initial setup
  updateSlidePosition();
  startAutoSlide();

  // Cleanup on page navigation
  document.addEventListener('astro:before-swap', () => {
    stopAutoSlide();
    window.removeEventListener('resize', updateSlidePosition);
  });
}

// Initialize slider when DOM is ready
document.addEventListener('DOMContentLoaded', initSlider);
</script>